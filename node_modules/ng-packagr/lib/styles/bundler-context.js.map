{"version":3,"file":"bundler-context.js","sourceRoot":"","sources":["../../../src/lib/styles/bundler-context.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  BuildContext,\n  BuildFailure,\n  BuildOptions,\n  BuildResult,\n  Message,\n  Metafile,\n  OutputFile,\n  build,\n  context,\n} from 'esbuild';\nimport { join } from 'node:path';\nimport { LoadResultCache, MemoryLoadResultCache } from './load-result-cache';\n\nexport type BundleContextResult =\n  | { errors: Message[]; warnings: Message[] }\n  | {\n      errors: undefined;\n      warnings: Message[];\n      metafile: Metafile;\n      outputFiles: BuildOutputFile[];\n    };\n\nexport interface InitialFileRecord {\n  entrypoint: boolean;\n  name?: string;\n  type: 'script' | 'style';\n  external?: boolean;\n  serverFile: boolean;\n  depth: number;\n}\n\nexport enum BuildOutputFileType {\n  Browser,\n  Media,\n  ServerApplication,\n  ServerRoot,\n  Root,\n}\n\nexport interface BuildOutputFile extends OutputFile {\n  type: BuildOutputFileType;\n  readonly size: number;\n  clone: () => BuildOutputFile;\n}\n\nexport type BundlerOptionsFactory<T extends BuildOptions = BuildOptions> = (\n  loadCache: LoadResultCache | undefined,\n) => T;\n\n/**\n * Determines if an unknown value is an esbuild BuildFailure error object thrown by esbuild.\n * @param value A potential esbuild BuildFailure error object.\n * @returns `true` if the object is determined to be a BuildFailure object; otherwise, `false`.\n */\nfunction isEsBuildFailure(value: unknown): value is BuildFailure {\n  return !!value && typeof value === 'object' && 'errors' in value && 'warnings' in value;\n}\n\nexport class BundlerContext {\n  #esbuildContext?: BuildContext<{ metafile: true; write: false }>;\n  #esbuildOptions?: BuildOptions & { metafile: true; write: false };\n  #esbuildResult?: BundleContextResult;\n  #optionsFactory: BundlerOptionsFactory<BuildOptions & { metafile: true; write: false }>;\n  #shouldCacheResult: boolean;\n  #loadCache?: MemoryLoadResultCache;\n  readonly watchFiles = new Set<string>();\n\n  constructor(\n    private workspaceRoot: string,\n    private incremental: boolean,\n    options: BuildOptions | BundlerOptionsFactory,\n  ) {\n    // To cache the results an option factory is needed to capture the full set of dependencies\n    this.#shouldCacheResult = incremental && typeof options === 'function';\n    this.#optionsFactory = (...args) => {\n      const baseOptions = typeof options === 'function' ? options(...args) : options;\n\n      return {\n        ...baseOptions,\n        metafile: true,\n        write: false,\n      };\n    };\n  }\n\n  /**\n   * Executes the esbuild build function and normalizes the build result in the event of a\n   * build failure that results in no output being generated.\n   * All builds use the `write` option with a value of `false` to allow for the output files\n   * build result array to be populated.\n   *\n   * @returns If output files are generated, the full esbuild BuildResult; if not, the\n   * warnings and errors for the attempted build.\n   */\n  async bundle(): Promise<BundleContextResult> {\n    // Return existing result if present\n    if (this.#esbuildResult) {\n      return this.#esbuildResult;\n    }\n\n    const result = await this.#performBundle();\n    if (this.#shouldCacheResult) {\n      this.#esbuildResult = result;\n    }\n\n    return result;\n  }\n\n  // eslint-disable-next-line max-lines-per-function\n  async #performBundle(): Promise<BundleContextResult> {\n    // Create esbuild options if not present\n    if (this.#esbuildOptions === undefined) {\n      if (this.incremental) {\n        this.#loadCache = new MemoryLoadResultCache();\n      }\n      this.#esbuildOptions = this.#optionsFactory(this.#loadCache);\n    }\n\n    if (this.incremental) {\n      this.watchFiles.clear();\n    }\n\n    let result: BuildResult<{ metafile: true; write: false }>;\n    try {\n      if (this.#esbuildContext) {\n        // Rebuild using the existing incremental build context\n        result = await this.#esbuildContext.rebuild();\n      } else if (this.incremental) {\n        // Create an incremental build context and perform the first build.\n        // Context creation does not perform a build.\n        this.#esbuildContext = await context(this.#esbuildOptions);\n        result = await this.#esbuildContext.rebuild();\n      } else {\n        // For non-incremental builds, perform a single build\n        result = await build(this.#esbuildOptions);\n      }\n    } catch (failure) {\n      // Build failures will throw an exception which contains errors/warnings\n      if (isEsBuildFailure(failure)) {\n        this.#addErrorsToWatch(failure);\n\n        return failure;\n      } else {\n        throw failure;\n      }\n    } finally {\n      if (this.incremental) {\n        // When incremental always add any files from the load result cache\n        if (this.#loadCache) {\n          for (const file of this.#loadCache.watchFiles) {\n            if (!isInternalAngularFile(file)) {\n              // watch files are fully resolved paths\n              this.watchFiles.add(file);\n            }\n          }\n        }\n      }\n    }\n\n    // Update files that should be watched.\n    // While this should technically not be linked to incremental mode, incremental is only\n    // currently enabled with watch mode where watch files are needed.\n    if (this.incremental) {\n      // Add input files except virtual angular files which do not exist on disk\n      for (const input of Object.keys(result.metafile.inputs)) {\n        if (!isInternalAngularFile(input)) {\n          // input file paths are always relative to the workspace root\n          this.watchFiles.add(join(this.workspaceRoot, input));\n        }\n      }\n    }\n\n    // Return if the build encountered any errors\n    if (result.errors.length) {\n      this.#addErrorsToWatch(result);\n\n      return {\n        errors: result.errors,\n        warnings: result.warnings,\n      };\n    }\n\n    // Return the successful build results\n    return {\n      ...result,\n      errors: undefined,\n    };\n  }\n\n  #addErrorsToWatch(result: BuildFailure | BuildResult): void {\n    for (const error of result.errors) {\n      let file = error.location?.file;\n      if (file && !isInternalAngularFile(file)) {\n        this.watchFiles.add(join(this.workspaceRoot, file));\n      }\n      for (const note of error.notes) {\n        file = note.location?.file;\n        if (file && !isInternalAngularFile(file)) {\n          this.watchFiles.add(join(this.workspaceRoot, file));\n        }\n      }\n    }\n  }\n\n  /**\n   * Invalidate a stored bundler result based on the previous watch files\n   * and a list of changed files.\n   * The context must be created with incremental mode enabled for results\n   * to be stored.\n   * @returns True, if the result was invalidated; False, otherwise.\n   */\n  invalidate(files: Iterable<string>): boolean {\n    if (!this.incremental) {\n      return false;\n    }\n\n    let invalid = false;\n    for (const file of files) {\n      if (this.#loadCache?.invalidate(file)) {\n        invalid = true;\n        continue;\n      }\n\n      invalid ||= this.watchFiles.has(file);\n    }\n\n    if (invalid) {\n      this.#esbuildResult = undefined;\n    }\n\n    return invalid;\n  }\n\n  /**\n   * Disposes incremental build resources present in the context.\n   *\n   * @returns A promise that resolves when disposal is complete.\n   */\n  async dispose(): Promise<void> {\n    try {\n      this.#esbuildOptions = undefined;\n      this.#esbuildResult = undefined;\n      this.#loadCache = undefined;\n      await this.#esbuildContext?.dispose();\n    } finally {\n      this.#esbuildContext = undefined;\n    }\n  }\n}\n\nfunction isInternalAngularFile(file: string) {\n  return file.startsWith('angular:');\n}\n"]}