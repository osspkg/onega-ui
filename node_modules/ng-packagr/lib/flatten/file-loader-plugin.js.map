{"version":3,"file":"file-loader-plugin.js","sourceRoot":"","sources":["../../../src/lib/flatten/file-loader-plugin.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAWA,4CA+BC;AA1CD,yCAA6C;AAI7C,kDAAoC;AACpC,wCAA+C;AAE/C,MAAM,iBAAiB,GAAG,CAAC,EAAE,EAAE,MAAM,EAAE,YAAY,CAAC,CAAC;AACrD;;GAEG;AACH,SAAgB,gBAAgB,CAAC,SAA0B;IACzD,OAAO;QACL,IAAI,EAAE,aAAa;QACnB,SAAS,EAAE,UAAU,EAAE,EAAE,QAAQ;YAC/B,IAAI,SAAS,CAAC,GAAG,CAAC,IAAA,qBAAc,EAAC,EAAE,CAAC,CAAC,EAAE,CAAC;gBACtC,OAAO,EAAE,CAAC;YACZ,CAAC;YAED,IAAI,QAAQ,EAAE,CAAC;gBACb,MAAM,QAAQ,GAAG,IAAA,qBAAc,EAAC,IAAA,mBAAO,EAAC,IAAA,mBAAO,EAAC,QAAQ,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;gBAChE,KAAK,MAAM,MAAM,IAAI,iBAAiB,EAAE,CAAC;oBACvC,MAAM,SAAS,GAAG,QAAQ,GAAG,MAAM,CAAC;oBACpC,IAAI,SAAS,CAAC,GAAG,CAAC,SAAS,CAAC,EAAE,CAAC;wBAC7B,OAAO,SAAS,CAAC;oBACnB,CAAC;gBACH,CAAC;YACH,CAAC;QACH,CAAC;QACD,IAAI,EAAE,UAAU,EAAE;YAChB,GAAG,CAAC,KAAK,CAAC,eAAe,EAAE,EAAE,CAAC,CAAC;YAC/B,MAAM,IAAI,GAAG,SAAS,CAAC,GAAG,CAAC,IAAA,qBAAc,EAAC,EAAE,CAAC,CAAC,CAAC;YAC/C,IAAI,CAAC,IAAI,EAAE,CAAC;gBACV,MAAM,IAAI,KAAK,CAAC,mBAAmB,EAAE,gBAAgB,CAAC,CAAC;YACzD,CAAC;YAED,OAAO;gBACL,IAAI,EAAE,IAAI,CAAC,OAAO;gBAClB,GAAG,EAAE,IAAI,CAAC,GAAG;aACd,CAAC;QACJ,CAAC;KACF,CAAC;AACJ,CAAC","sourcesContent":["import { dirname, resolve } from 'node:path';\nimport type { Plugin } from 'rollup';\nimport { OutputFileCache } from '../ng-package/nodes';\n\nimport * as log from '../utils/log';\nimport { ensureUnixPath } from '../utils/path';\n\nconst POTENTIAL_MATCHES = ['', '.mjs', '/index.mjs'];\n/**\n * Loads a file and it's map.\n */\nexport function fileLoaderPlugin(fileCache: OutputFileCache): Plugin {\n  return {\n    name: 'file-loader',\n    resolveId: function (id, importer) {\n      if (fileCache.has(ensureUnixPath(id))) {\n        return id;\n      }\n\n      if (importer) {\n        const resolved = ensureUnixPath(resolve(dirname(importer), id));\n        for (const suffix of POTENTIAL_MATCHES) {\n          const potential = resolved + suffix;\n          if (fileCache.has(potential)) {\n            return potential;\n          }\n        }\n      }\n    },\n    load: function (id) {\n      log.debug(`file-loader ${id}`);\n      const data = fileCache.get(ensureUnixPath(id));\n      if (!data) {\n        throw new Error(`Could not load '${id}' from memory.`);\n      }\n\n      return {\n        code: data.content,\n        map: data.map,\n      };\n    },\n  };\n}\n"]}