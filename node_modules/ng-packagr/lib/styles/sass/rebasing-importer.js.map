{"version":3,"file":"rebasing-importer.js","sourceRoot":"","sources":["../../../../src/lib/styles/sass/rebasing-importer.ts"],"names":[],"mappings":"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","sourcesContent":["import { readFileSync, readdirSync, statSync } from 'node:fs';\nimport { basename, dirname, extname, join, relative } from 'node:path';\nimport { fileURLToPath, pathToFileURL } from 'node:url';\nimport type { CanonicalizeContext, Importer, ImporterResult, Syntax } from 'sass';\nimport { findUrls } from './lexer';\n\n/**\n * A preprocessed cache entry for the files and directories within a previously searched\n * directory when performing Sass import resolution.\n */\nexport interface DirectoryEntry {\n  files: Set<string>;\n  directories: Set<string>;\n}\n\n/**\n * A Sass Importer base class that provides the load logic to rebase all `url()` functions\n * within a stylesheet. The rebasing will ensure that the URLs in the output of the Sass compiler\n * reflect the final filesystem location of the output CSS file.\n *\n * This class provides the core of the rebasing functionality. To ensure that each file is processed\n * by this importer's load implementation, the Sass compiler requires the importer's canonicalize\n * function to return a non-null value with the resolved location of the requested stylesheet.\n * Concrete implementations of this class must provide this canonicalize functionality for rebasing\n * to be effective.\n */\nabstract class UrlRebasingImporter implements Importer<'sync'> {\n  /**\n   * @param entryDirectory The directory of the entry stylesheet that was passed to the Sass compiler.\n   * @param rebaseSourceMaps When provided, rebased files will have an intermediate sourcemap added to the Map\n   * which can be used to generate a final sourcemap that contains original sources.\n   */\n  constructor(private entryDirectory: string) {}\n\n  abstract canonicalize(url: string, options: { fromImport: boolean }): URL | null;\n\n  load(canonicalUrl: URL): ImporterResult | null {\n    const stylesheetPath = fileURLToPath(canonicalUrl);\n    const stylesheetDirectory = dirname(stylesheetPath);\n    let contents = readFileSync(stylesheetPath, 'utf-8');\n\n    // Rebase any URLs that are found\n    let updatedContents;\n    for (const { start, end, value } of findUrls(contents)) {\n      // Skip if value is empty or Webpack-specific prefix\n      if (value.length === 0 || value[0] === '~' || value[0] === '^') {\n        continue;\n      }\n\n      // Skip if root-relative, absolute or protocol relative url\n      if (/^((?:\\w+:)?\\/\\/|data:|chrome:|\\/)/.test(value)) {\n        continue;\n      }\n\n      // Skip if a fragment identifier but not a Sass interpolation\n      if (value[0] === '#' && value[1] !== '{') {\n        continue;\n      }\n\n      // Skip if value is value contains a function call\n      if (/#\\{.+\\(.+\\)\\}/.test(value)) {\n        continue;\n      }\n\n      // Sass variable usage either starts with a `$` or contains a namespace and a `.$`\n      const valueNormalized = value[0] === '$' || /^\\w+\\.\\$/.test(value) ? `#{${value}}` : value;\n      const rebasedPath = relative(this.entryDirectory, stylesheetDirectory);\n\n      // Normalize path separators and escape characters\n      // https://developer.mozilla.org/en-US/docs/Web/CSS/url#syntax\n      const rebasedUrl = rebasedPath.replace(/\\\\/g, '/').replace(/[()\\s'\"]/g, '\\\\$&');\n\n      updatedContents ??= contents;\n      updatedContents = contents.slice(0, start) + `\"${rebasedUrl}||file:${valueNormalized}\"` + contents.slice(end);\n    }\n\n    if (updatedContents) {\n      contents = updatedContents;\n    }\n\n    let syntax: Syntax | undefined;\n    switch (extname(stylesheetPath).toLowerCase()) {\n      case '.css':\n        syntax = 'css';\n        break;\n      case '.sass':\n        syntax = 'indented';\n        break;\n      default:\n        syntax = 'scss';\n        break;\n    }\n\n    return {\n      contents,\n      syntax,\n      sourceMapUrl: canonicalUrl,\n    };\n  }\n}\n\n/**\n * Provides the Sass importer logic to resolve relative stylesheet imports via both import and use rules\n * and also rebase any `url()` function usage within those stylesheets. The rebasing will ensure that\n * the URLs in the output of the Sass compiler reflect the final filesystem location of the output CSS file.\n */\nexport class RelativeUrlRebasingImporter extends UrlRebasingImporter {\n  constructor(\n    entryDirectory: string,\n    private directoryCache = new Map<string, DirectoryEntry>(),\n  ) {\n    super(entryDirectory);\n  }\n\n  canonicalize(url: string, options: { fromImport: boolean }): URL | null {\n    return this.resolveImport(url, options.fromImport, true);\n  }\n\n  /**\n   * Attempts to resolve a provided URL to a stylesheet file using the Sass compiler's resolution algorithm.\n   * Based on https://github.com/sass/dart-sass/blob/44d6bb6ac72fe6b93f5bfec371a1fffb18e6b76d/lib/src/importer/utils.dart\n   * @param url The file protocol URL to resolve.\n   * @param fromImport If true, URL was from an import rule; otherwise from a use rule.\n   * @param checkDirectory If true, try checking for a directory with the base name containing an index file.\n   * @returns A full resolved URL of the stylesheet file or `null` if not found.\n   */\n  private resolveImport(url: string, fromImport: boolean, checkDirectory: boolean): URL | null {\n    let stylesheetPath;\n    try {\n      stylesheetPath = fileURLToPath(url);\n    } catch {\n      // Only file protocol URLs are supported by this importer\n      return null;\n    }\n\n    const directory = dirname(stylesheetPath);\n    const extension = extname(stylesheetPath);\n    const hasStyleExtension = extension === '.scss' || extension === '.sass' || extension === '.css';\n    // Remove the style extension if present to allow adding the `.import` suffix\n    const filename = basename(stylesheetPath, hasStyleExtension ? extension : undefined);\n\n    const importPotentials = new Set<string>();\n    const defaultPotentials = new Set<string>();\n\n    if (hasStyleExtension) {\n      if (fromImport) {\n        importPotentials.add(filename + '.import' + extension);\n        importPotentials.add('_' + filename + '.import' + extension);\n      }\n      defaultPotentials.add(filename + extension);\n      defaultPotentials.add('_' + filename + extension);\n    } else {\n      if (fromImport) {\n        importPotentials.add(filename + '.import.scss');\n        importPotentials.add(filename + '.import.sass');\n        importPotentials.add(filename + '.import.css');\n        importPotentials.add('_' + filename + '.import.scss');\n        importPotentials.add('_' + filename + '.import.sass');\n        importPotentials.add('_' + filename + '.import.css');\n      }\n      defaultPotentials.add(filename + '.scss');\n      defaultPotentials.add(filename + '.sass');\n      defaultPotentials.add(filename + '.css');\n      defaultPotentials.add('_' + filename + '.scss');\n      defaultPotentials.add('_' + filename + '.sass');\n      defaultPotentials.add('_' + filename + '.css');\n    }\n\n    let foundDefaults;\n    let foundImports;\n    let hasPotentialIndex = false;\n\n    let cachedEntries = this.directoryCache.get(directory);\n    if (cachedEntries) {\n      // If there is a preprocessed cache of the directory, perform an intersection of the potentials\n      // and the directory files.\n      const { files, directories } = cachedEntries;\n      foundDefaults = [...defaultPotentials].filter(potential => files.has(potential));\n      foundImports = [...importPotentials].filter(potential => files.has(potential));\n      hasPotentialIndex = checkDirectory && !hasStyleExtension && directories.has(filename);\n    } else {\n      // If no preprocessed cache exists, get the entries from the file system and, while searching,\n      // generate the cache for later requests.\n      let entries;\n      try {\n        entries = readdirSync(directory, { withFileTypes: true });\n      } catch (error) {\n        // If the containing directory does not exist return null to indicate it cannot be resolved\n        if (error.code === 'ENOENT') {\n          return null;\n        }\n\n        throw new Error(`Error reading directory [\"${directory}\"] while resolving Sass import`, {\n          cause: error,\n        });\n      }\n\n      foundDefaults = [];\n      foundImports = [];\n      cachedEntries = { files: new Set<string>(), directories: new Set<string>() };\n      for (const entry of entries) {\n        let isDirectory: boolean;\n        let isFile: boolean;\n\n        if (entry.isSymbolicLink()) {\n          const stats = statSync(join(directory, entry.name));\n          isDirectory = stats.isDirectory();\n          isFile = stats.isFile();\n        } else {\n          isDirectory = entry.isDirectory();\n          isFile = entry.isFile();\n        }\n\n        if (isDirectory) {\n          cachedEntries.directories.add(entry.name);\n\n          // Record if the name should be checked as a directory with an index file\n          if (checkDirectory && !hasStyleExtension && entry.name === filename) {\n            hasPotentialIndex = true;\n          }\n        }\n\n        if (!isFile) {\n          continue;\n        }\n\n        cachedEntries.files.add(entry.name);\n\n        if (importPotentials.has(entry.name)) {\n          foundImports.push(entry.name);\n        }\n\n        if (defaultPotentials.has(entry.name)) {\n          foundDefaults.push(entry.name);\n        }\n      }\n\n      this.directoryCache.set(directory, cachedEntries);\n    }\n\n    // `foundImports` will only contain elements if `options.fromImport` is true\n    const result = this.checkFound(foundImports) ?? this.checkFound(foundDefaults);\n    if (result !== null) {\n      return pathToFileURL(join(directory, result));\n    }\n\n    if (hasPotentialIndex) {\n      // Check for index files using filename as a directory\n      return this.resolveImport(url + '/index', fromImport, false);\n    }\n\n    return null;\n  }\n\n  /**\n   * Checks an array of potential stylesheet files to determine if there is a valid\n   * stylesheet file. More than one discovered file may indicate an error.\n   * @param found An array of discovered stylesheet files.\n   * @returns A fully resolved path for a stylesheet file or `null` if not found.\n   * @throws If there are ambiguous files discovered.\n   */\n  private checkFound(found: string[]): string | null {\n    if (found.length === 0) {\n      // Not found\n      return null;\n    }\n\n    // More than one found file may be an error\n    if (found.length > 1) {\n      // Presence of CSS files alongside a Sass file does not cause an error\n      const foundWithoutCss = found.filter(element => extname(element) !== '.css');\n      // If the length is zero then there are two or more css files\n      // If the length is more than one than there are two or more sass/scss files\n      if (foundWithoutCss.length !== 1) {\n        throw new Error('Ambiguous import detected.');\n      }\n\n      // Return the non-CSS file (sass/scss files have priority)\n      // https://github.com/sass/dart-sass/blob/44d6bb6ac72fe6b93f5bfec371a1fffb18e6b76d/lib/src/importer/utils.dart#L44-L47\n      return foundWithoutCss[0];\n    }\n\n    return found[0];\n  }\n}\n\n/**\n * Provides the Sass importer logic to resolve module (npm package) stylesheet imports via both import and\n * use rules and also rebase any `url()` function usage within those stylesheets. The rebasing will ensure that\n * the URLs in the output of the Sass compiler reflect the final filesystem location of the output CSS file.\n */\nexport class ModuleUrlRebasingImporter extends RelativeUrlRebasingImporter {\n  constructor(\n    entryDirectory: string,\n    directoryCache: Map<string, DirectoryEntry>,\n    private finder: (specifier: string, options: CanonicalizeContext) => URL | null,\n  ) {\n    super(entryDirectory, directoryCache);\n  }\n\n  override canonicalize(url: string, options: CanonicalizeContext): URL | null {\n    if (url.startsWith('file://')) {\n      return super.canonicalize(url, options);\n    }\n\n    let result = this.finder(url, options);\n    result &&= super.canonicalize(result.href, options);\n\n    return result;\n  }\n}\n\n/**\n * Provides the Sass importer logic to resolve load paths located stylesheet imports via both import and\n * use rules and also rebase any `url()` function usage within those stylesheets. The rebasing will ensure that\n * the URLs in the output of the Sass compiler reflect the final filesystem location of the output CSS file.\n */\nexport class LoadPathsUrlRebasingImporter extends RelativeUrlRebasingImporter {\n  constructor(\n    entryDirectory: string,\n    directoryCache: Map<string, DirectoryEntry>,\n    private loadPaths: Iterable<string>,\n  ) {\n    super(entryDirectory, directoryCache);\n  }\n\n  override canonicalize(url: string, options: { fromImport: boolean }): URL | null {\n    if (url.startsWith('file://')) {\n      return super.canonicalize(url, options);\n    }\n\n    let result = null;\n    for (const loadPath of this.loadPaths) {\n      result = super.canonicalize(pathToFileURL(join(loadPath, url)).href, options);\n      if (result !== null) {\n        break;\n      }\n    }\n\n    return result;\n  }\n}\n\n/**\n * Workaround for Sass not calling instance methods with `this`.\n * The `canonicalize` and `load` methods will be bound to the class instance.\n * @param importer A Sass importer to bind.\n * @returns The bound Sass importer.\n */\nexport function sassBindWorkaround<T extends Importer>(importer: T): T {\n  importer.canonicalize = importer.canonicalize.bind(importer);\n  importer.load = importer.load.bind(importer);\n\n  return importer;\n}\n"]}