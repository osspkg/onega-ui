{"version":3,"file":"component-stylesheets.js","sourceRoot":"","sources":["../../../src/lib/styles/component-stylesheets.ts"],"names":[],"mappings":"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","sourcesContent":["import { OutputFile } from 'esbuild';\nimport { createHash } from 'node:crypto';\nimport path from 'node:path';\nimport { BuildOutputFileType, BundleContextResult, BundlerContext } from './bundler-context';\nimport { MemoryCache } from './cache';\nimport { BundleStylesheetOptions, createStylesheetBundleOptions } from './stylesheets/bundle-options';\n\n/**\n * Bundles component stylesheets. A stylesheet can be either an inline stylesheet that\n * is contained within the Component's metadata definition or an external file referenced\n * from the Component's metadata definition.\n */\nexport class ComponentStylesheetBundler {\n  readonly #fileContexts = new MemoryCache<BundlerContext>();\n  readonly #inlineContexts = new MemoryCache<BundlerContext>();\n\n  /**\n   *\n   * @param options An object containing the stylesheet bundling options.\n   * @param cache A load result cache to use when bundling.\n   */\n  constructor(\n    private readonly options: BundleStylesheetOptions,\n    private readonly defaultInlineLanguage: string,\n    private readonly incremental: boolean,\n  ) {}\n\n  async bundleFile(entry: string) {\n    const bundlerContext = await this.#fileContexts.getOrCreate(entry, () => {\n      return new BundlerContext(this.options.workspaceRoot, this.incremental, loadCache => {\n        const buildOptions = createStylesheetBundleOptions(this.options, loadCache);\n\n          buildOptions.entryPoints = [entry];\n\n        return buildOptions;\n      });\n    });\n\n    return this.extractResult(await bundlerContext.bundle(), bundlerContext.watchFiles);\n  }\n\n  async bundleInline(data: string, filename: string, language = this.defaultInlineLanguage) {\n    // Use a hash of the inline stylesheet content to ensure a consistent identifier. External stylesheets will resolve\n    // to the actual stylesheet file path.\n    // TODO: Consider xxhash instead for hashing\n    const id = createHash('sha256')\n      .update(data)\n      .digest('hex');\n    const entry = [language, id, filename].join(';');\n\n    const bundlerContext = await this.#inlineContexts.getOrCreate(entry, () => {\n      const namespace = 'angular:styles/component';\n\n      return new BundlerContext(this.options.workspaceRoot, this.incremental, loadCache => {\n        const buildOptions = createStylesheetBundleOptions(this.options, loadCache, {\n          [entry]: data,\n        });\n          buildOptions.entryPoints = [`${namespace};${entry}`];\n\n        buildOptions.plugins.push({\n          name: 'angular-component-styles',\n          setup(build) {\n            build.onResolve({ filter: /^angular:styles\\/component;/ }, args => {\n              if (args.kind !== 'entry-point') {\n                return null;\n              }\n\n              return {\n                path: entry,\n                namespace,\n              };\n            });\n            build.onLoad({ filter: /^css;/, namespace }, () => {\n              return {\n                contents: data,\n                loader: 'css',\n                resolveDir: path.dirname(filename),\n              };\n            });\n          },\n        });\n\n        return buildOptions;\n      });\n    });\n\n    // Extract the result of the bundling from the output files\n    return this.extractResult(await bundlerContext.bundle(), bundlerContext.watchFiles);\n  }\n\n  /**\n   * Invalidates both file and inline based component style bundling state for a set of modified files.\n   * @param files The group of files that have been modified\n   * @returns An array of file based stylesheet entries if any were invalidated; otherwise, undefined.\n   */\n  invalidate(files: Iterable<string>): string[] | undefined {\n    if (!this.incremental) {\n      return;\n    }\n\n    const normalizedFiles = [...files].map(path.normalize);\n    let entries: string[] | undefined;\n\n    for (const [entry, bundler] of this.#fileContexts.entries()) {\n      if (bundler.invalidate(normalizedFiles)) {\n        entries ??= [];\n        entries.push(entry);\n      }\n    }\n    for (const bundler of this.#inlineContexts.values()) {\n      bundler.invalidate(normalizedFiles);\n    }\n\n    return entries;\n  }\n\n  async dispose(): Promise<void> {\n    const contexts = [...this.#fileContexts.values(), ...this.#inlineContexts.values()];\n    this.#fileContexts.clear();\n    this.#inlineContexts.clear();\n\n    await Promise.allSettled(contexts.map(context => context.dispose()));\n  }\n\n  private extractResult(result: BundleContextResult, referencedFiles: Set<string> | undefined) {\n    let contents = '';\n    let metafile;\n    const outputFiles: OutputFile[] = [];\n\n    if ('outputFiles' in result) {\n      for (const outputFile of result.outputFiles) {\n        const filename = path.basename(outputFile.path);\n\n        if (outputFile.type === BuildOutputFileType.Media || filename.endsWith('.css.map')) {\n          // The output files could also contain resources (images/fonts/etc.) that were referenced and the map files.\n\n          // Clone the output file to avoid amending the original path which would causes problems during rebuild.\n          const clonedOutputFile = outputFile.clone();\n\n          // Needed for Bazel as otherwise the files will not be written in the correct place,\n          // this is because esbuild will resolve the output file from the outdir which is currently set to `workspaceRoot` twice,\n          // once in the stylesheet and the other in the application code bundler.\n          // Ex: `../../../../../app.component.css.map`.\n          clonedOutputFile.path = path.join(this.options.workspaceRoot, outputFile.path);\n\n          outputFiles.push(clonedOutputFile);\n        } else if (filename.endsWith('.css')) {\n          contents = outputFile.text;\n        } else {\n          throw new Error(\n            `Unexpected non CSS/Media file \"${filename}\" outputted during component stylesheet processing.`,\n          );\n        }\n      }\n\n      metafile = result.metafile;\n    }\n\n    return {\n      errors: result.errors,\n      warnings: result.warnings,\n      contents,\n      outputFiles,\n      metafile,\n      referencedFiles,\n    };\n  }\n}\n"]}