{"version":3,"file":"worker.js","sourceRoot":"","sources":["../../../../src/lib/styles/sass/worker.ts"],"names":[],"mappings":"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","sourcesContent":["import mergeSourceMaps, { RawSourceMap } from '@ampproject/remapping';\nimport { dirname } from 'node:path';\nimport { fileURLToPath, pathToFileURL } from 'node:url';\nimport { MessagePort, receiveMessageOnPort } from 'node:worker_threads';\nimport { Deprecation, Exception, FileImporter, SourceSpan, StringOptions, compileString } from 'sass';\nimport {\n  DirectoryEntry,\n  LoadPathsUrlRebasingImporter,\n  ModuleUrlRebasingImporter,\n  RelativeUrlRebasingImporter,\n  sassBindWorkaround,\n} from './rebasing-importer';\nimport type { SerializableDeprecation, SerializableWarningMessage } from './sass-service';\n\n/**\n * A request to render a Sass stylesheet using the supplied options.\n */\ninterface RenderRequestMessage {\n  /**\n   * The contents to compile.\n   */\n  source: string;\n\n  /**\n   * The Sass options to provide to the `dart-sass` compile function.\n   */\n  options: Omit<StringOptions<'sync'>, 'url'> & { url: string };\n\n  /**\n   * Indicates the request has a custom importer function on the main thread.\n   */\n  importerChannel?: {\n    port: MessagePort;\n    signal: Int32Array;\n  };\n\n  /**\n   * Indicates the request has a custom logger for warning messages.\n   */\n  hasLogger: boolean;\n\n  /**\n   * Indicates paths within url() CSS functions should be rebased.\n   */\n  rebase: boolean;\n}\n\ninterface RenderResult {\n  warnings: SerializableWarningMessage[] | undefined;\n  result: {\n    css: string;\n    loadedUrls: string[];\n    sourceMap?: RawSourceMap;\n  };\n}\n\ninterface RenderError {\n  warnings: SerializableWarningMessage[] | undefined;\n  error: {\n    message: string;\n    stack?: string;\n    span?: Omit<SourceSpan, 'url'> & { url?: string };\n    sassMessage?: string;\n    sassStack?: string;\n  };\n}\n\nexport default async function renderSassStylesheet(request: RenderRequestMessage): Promise<RenderResult | RenderError> {\n  const { importerChannel, hasLogger, source, options, rebase } = request;\n\n  const entryDirectory = dirname(options.url);\n  let warnings: SerializableWarningMessage[] | undefined;\n  try {\n    const directoryCache = new Map<string, DirectoryEntry>();\n    const rebaseSourceMaps = options.sourceMap ? new Map<string, RawSourceMap>() : undefined;\n    if (importerChannel) {\n      // When a custom importer function is present, the importer request must be proxied\n      // back to the main thread where it can be executed.\n      // This process must be synchronous from the perspective of dart-sass. The `Atomics`\n      // functions combined with the shared memory `importSignal` and the Node.js\n      // `receiveMessageOnPort` function are used to ensure synchronous behavior.\n      const proxyImporter: FileImporter<'sync'> = {\n        findFileUrl: (url, { fromImport, containingUrl }) => {\n          Atomics.store(importerChannel.signal, 0, 0);\n          importerChannel.port.postMessage({\n            url,\n            options: {\n              fromImport,\n              containingUrl: containingUrl ? fileURLToPath(containingUrl) : null,\n            },\n          });\n          // Wait for the main thread to set the signal to 1 and notify, which tells\n          // us that a message can be received on the port.\n          // If the main thread is fast, the signal will already be set to 1, and no\n          // sleep/notify is necessary.\n          // However, there can be a race condition here:\n          // - the main thread sets the signal to 1, but does not get to the notify instruction yet\n          // - the worker does not pause because the signal is set to 1\n          // - the worker very soon enters this method again\n          // - this method sets the signal to 0 and sends the message\n          // - the signal is 0 and so the `Atomics.wait` call blocks\n          // - only now the main thread runs the `notify` from the first invocation, so the\n          //   worker continues.\n          // - but there is no message yet in the port, because the thread should not have been\n          //   waken up yet.\n          // To combat this, wait for a non-0 value _twice_.\n          // Almost every time, this immediately continues with \"not-equal\", because\n          // the signal is still set to 1, except during the race condition, when the second\n          // wait will wait for the correct notify.\n          Atomics.wait(importerChannel.signal, 0, 0);\n          Atomics.wait(importerChannel.signal, 0, 0);\n\n          const result = receiveMessageOnPort(importerChannel.port)?.message as string | null;\n\n          return result ? pathToFileURL(result) : null;\n        },\n      };\n      options.importers = [\n        rebase\n          ? sassBindWorkaround(new ModuleUrlRebasingImporter(entryDirectory, directoryCache, proxyImporter.findFileUrl))\n          : proxyImporter,\n      ];\n    }\n\n    if (rebase && options.loadPaths?.length) {\n      options.importers ??= [];\n      options.importers.push(\n        sassBindWorkaround(\n          new LoadPathsUrlRebasingImporter(\n            entryDirectory,\n            directoryCache,\n\n            options.loadPaths,\n          ),\n        ),\n      );\n      options.loadPaths = undefined;\n    }\n\n    let relativeImporter;\n    if (rebase) {\n      relativeImporter = sassBindWorkaround(new RelativeUrlRebasingImporter(entryDirectory, directoryCache));\n    }\n\n    // The synchronous Sass render function can be up to two times faster than the async variant\n    const result = compileString(source, {\n      ...options,\n      // URL is not serializable so to convert to string in the parent and back to URL here.\n      url: pathToFileURL(options.url),\n      // The `importer` option (singular) handles relative imports\n      importer: relativeImporter,\n      logger: hasLogger\n        ? {\n            warn(message, warnOptions) {\n              warnings ??= [];\n              warnings.push({\n                ...warnOptions,\n                message,\n                span: warnOptions.span && convertSourceSpan(warnOptions.span),\n                ...convertDeprecation(\n                  warnOptions.deprecation,\n                  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                  (warnOptions as any).deprecationType,\n                ),\n              });\n            },\n          }\n        : undefined,\n    });\n\n    if (result.sourceMap && rebaseSourceMaps?.size) {\n      // Merge the intermediate rebasing source maps into the final Sass generated source map.\n      // Casting is required due to small but compatible differences in typings between the packages.\n      result.sourceMap = mergeSourceMaps(\n        result.sourceMap as unknown as RawSourceMap,\n        // To prevent an infinite lookup loop, skip getting the source when the rebasing source map\n        // is referencing its original self.\n        (file, context) => (file !== context.importer ? rebaseSourceMaps.get(file) : null),\n      ) as unknown as typeof result.sourceMap;\n    }\n\n    return {\n      warnings,\n      result: {\n        ...result,\n        sourceMap: result.sourceMap as unknown as RawSourceMap | undefined,\n        // URL is not serializable so to convert to string here and back to URL in the parent.\n        loadedUrls: result.loadedUrls.map(p => fileURLToPath(p)),\n      },\n    };\n  } catch (error) {\n    // Needed because V8 will only serialize the message and stack properties of an Error instance.\n    if (error instanceof Exception) {\n      const { span, message, stack, sassMessage, sassStack } = error;\n\n      return {\n        warnings,\n        error: {\n          span: convertSourceSpan(span),\n          message,\n          stack,\n          sassMessage,\n          sassStack,\n        },\n      };\n    } else if (error instanceof Error) {\n      const { message, stack } = error;\n\n      return { warnings, error: { message, stack } };\n    } else {\n      return {\n        warnings,\n        error: { message: 'An unknown error has occurred.' },\n      };\n    }\n  }\n}\n\n/**\n * Converts a Sass SourceSpan object into a serializable form.\n * The SourceSpan object contains a URL property which must be converted into a string.\n * Also, most of the interface's properties are get accessors and are not automatically\n * serialized when sent back from the worker.\n *\n * @param span The Sass SourceSpan object to convert.\n * @returns A serializable form of the SourceSpan object.\n */\nfunction convertSourceSpan(span: SourceSpan): Omit<SourceSpan, 'url'> & { url?: string } {\n  return {\n    text: span.text,\n    context: span.context,\n    end: {\n      column: span.end.column,\n      offset: span.end.offset,\n      line: span.end.line,\n    },\n    start: {\n      column: span.start.column,\n      offset: span.start.offset,\n      line: span.start.line,\n    },\n    url: span.url ? fileURLToPath(span.url) : undefined,\n  };\n}\n\nfunction convertDeprecation(\n  deprecation: boolean,\n  deprecationType: Deprecation | undefined,\n): { deprecation: false } | { deprecation: true; deprecationType: SerializableDeprecation } {\n  if (!deprecation || !deprecationType) {\n    return { deprecation: false };\n  }\n\n  const { obsoleteIn, deprecatedIn, ...rest } = deprecationType;\n\n  return {\n    deprecation: true,\n    deprecationType: {\n      ...rest,\n      obsoleteIn: obsoleteIn\n        ? {\n            major: obsoleteIn.major,\n            minor: obsoleteIn.minor,\n            patch: obsoleteIn.patch,\n          }\n        : null,\n      deprecatedIn: deprecatedIn\n        ? {\n            major: deprecatedIn.major,\n            minor: deprecatedIn.minor,\n            patch: deprecatedIn.patch,\n          }\n        : null,\n    },\n  };\n}\n"]}