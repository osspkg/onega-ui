{"version":3,"file":"load-result-cache.js","sourceRoot":"","sources":["../../../src/lib/styles/load-result-cache.ts"],"names":[],"mappings":";;;;;;;;;AASA,4CA4BC;AApCD,yCAAsC;AAQtC,SAAgB,gBAAgB,CAC9B,KAAkC,EAClC,QAA8C;IAE9C,IAAI,KAAK,KAAK,SAAS,EAAE,CAAC;QACxB,OAAO,QAAQ,CAAC;IAClB,CAAC;IAED,OAAO,KAAK,EAAE,IAAI,EAAE,EAAE;;QACpB,MAAM,YAAY,GAAG,GAAG,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC,IAAI,EAAE,CAAC;QACtD,IAAI,MAAM,GAAoC,KAAK,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;QAEtE,IAAI,MAAM,KAAK,SAAS,EAAE,CAAC;YACzB,MAAM,GAAG,MAAM,QAAQ,CAAC,IAAI,CAAC,CAAC;YAE9B,iCAAiC;YACjC,IAAI,MAAM,EAAE,CAAC;gBACX,8DAA8D;gBAC9D,IAAI,IAAI,CAAC,SAAS,KAAK,MAAM,EAAE,CAAC;oBAC9B,MAAA,MAAM,CAAC,UAAU,oCAAjB,MAAM,CAAC,UAAU,GAAK,EAAE,EAAC;oBACzB,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;gBACpC,CAAC;gBACD,MAAM,KAAK,CAAC,GAAG,CAAC,YAAY,EAAE,MAAM,CAAC,CAAC;YACxC,CAAC;QACH,CAAC;QAED,OAAO,MAAM,CAAC;IAChB,CAAC,CAAC;AACJ,CAAC;AAED,MAAa,qBAAqB;IAAlC;QACE,6CAAe,IAAI,GAAG,EAAwB,EAAC;QAC/C,kDAAoB,IAAI,GAAG,EAAuB,EAAC;IA2CrD,CAAC;IAzCC,GAAG,CAAC,IAAY;QACd,OAAO,uBAAA,IAAI,0CAAa,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;IACrC,CAAC;IAED,KAAK,CAAC,GAAG,CAAC,IAAY,EAAE,MAAoB;QAC1C,uBAAA,IAAI,0CAAa,CAAC,GAAG,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;QACpC,IAAI,MAAM,CAAC,UAAU,EAAE,CAAC;YACtB,KAAK,MAAM,SAAS,IAAI,MAAM,CAAC,UAAU,EAAE,CAAC;gBAC1C,8DAA8D;gBAC9D,MAAM,mBAAmB,GAAG,IAAA,qBAAS,EAAC,SAAS,CAAC,CAAC;gBACjD,IAAI,QAAQ,GAAG,uBAAA,IAAI,+CAAkB,CAAC,GAAG,CAAC,mBAAmB,CAAC,CAAC;gBAC/D,IAAI,QAAQ,KAAK,SAAS,EAAE,CAAC;oBAC3B,QAAQ,GAAG,IAAI,GAAG,EAAE,CAAC;oBACrB,uBAAA,IAAI,+CAAkB,CAAC,GAAG,CAAC,mBAAmB,EAAE,QAAQ,CAAC,CAAC;gBAC5D,CAAC;gBACD,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;YACrB,CAAC;QACH,CAAC;IACH,CAAC;IAED,UAAU,CAAC,IAAY;QACrB,MAAM,aAAa,GAAG,uBAAA,IAAI,+CAAkB,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QACvD,IAAI,KAAK,GAAG,KAAK,CAAC;QAElB,IAAI,aAAa,EAAE,CAAC;YAClB,KAAK,MAAM,QAAQ,IAAI,aAAa,EAAE,CAAC;gBACrC,IAAI,uBAAA,IAAI,0CAAa,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAE,CAAC;oBACvC,KAAK,GAAG,IAAI,CAAC;gBACf,CAAC;YACH,CAAC;YACD,uBAAA,IAAI,+CAAkB,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QACtC,CAAC;QAED,OAAO,KAAK,CAAC;IACf,CAAC;IAED,IAAI,UAAU;QACZ,iEAAiE;QACjE,8DAA8D;QAC9D,OAAO,CAAC,GAAG,uBAAA,IAAI,+CAAkB,CAAC,IAAI,EAAE,CAAC,CAAC;IAC5C,CAAC;CACF;AA7CD,sDA6CC","sourcesContent":["import type { OnLoadResult, PluginBuild } from 'esbuild';\nimport { normalize } from 'node:path';\n\nexport interface LoadResultCache {\n  get(path: string): OnLoadResult | undefined;\n  put(path: string, result: OnLoadResult): Promise<void>;\n  readonly watchFiles: ReadonlyArray<string>;\n}\n\nexport function createCachedLoad(\n  cache: LoadResultCache | undefined,\n  callback: Parameters<PluginBuild['onLoad']>[1],\n): Parameters<PluginBuild['onLoad']>[1] {\n  if (cache === undefined) {\n    return callback;\n  }\n\n  return async (args) => {\n    const loadCacheKey = `${args.namespace}:${args.path}`;\n    let result: OnLoadResult | null | undefined = cache.get(loadCacheKey);\n\n    if (result === undefined) {\n      result = await callback(args);\n\n      // Do not cache null or undefined\n      if (result) {\n        // Ensure requested path is included if it was a resolved file\n        if (args.namespace === 'file') {\n          result.watchFiles ??= [];\n          result.watchFiles.push(args.path);\n        }\n        await cache.put(loadCacheKey, result);\n      }\n    }\n\n    return result;\n  };\n}\n\nexport class MemoryLoadResultCache implements LoadResultCache {\n  #loadResults = new Map<string, OnLoadResult>();\n  #fileDependencies = new Map<string, Set<string>>();\n\n  get(path: string): OnLoadResult | undefined {\n    return this.#loadResults.get(path);\n  }\n\n  async put(path: string, result: OnLoadResult): Promise<void> {\n    this.#loadResults.set(path, result);\n    if (result.watchFiles) {\n      for (const watchFile of result.watchFiles) {\n        // Normalize the watch file path to ensure OS consistent paths\n        const normalizedWatchFile = normalize(watchFile);\n        let affected = this.#fileDependencies.get(normalizedWatchFile);\n        if (affected === undefined) {\n          affected = new Set();\n          this.#fileDependencies.set(normalizedWatchFile, affected);\n        }\n        affected.add(path);\n      }\n    }\n  }\n\n  invalidate(path: string): boolean {\n    const affectedPaths = this.#fileDependencies.get(path);\n    let found = false;\n\n    if (affectedPaths) {\n      for (const affected of affectedPaths) {\n        if (this.#loadResults.delete(affected)) {\n          found = true;\n        }\n      }\n      this.#fileDependencies.delete(path);\n    }\n\n    return found;\n  }\n\n  get watchFiles(): string[] {\n    // this.#loadResults.keys() is not included here because the keys\n    // are namespaced request paths and not disk-based file paths.\n    return [...this.#fileDependencies.keys()];\n  }\n}\n"]}