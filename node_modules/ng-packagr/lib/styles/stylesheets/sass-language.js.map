{"version":3,"file":"sass-language.js","sourceRoot":"","sources":["../../../../src/lib/styles/stylesheets/sass-language.ts"],"names":[],"mappings":"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","sourcesContent":["import type { OnLoadResult, PartialMessage, PartialNote, ResolveResult } from 'esbuild';\nimport { dirname, join, relative } from 'node:path';\nimport { fileURLToPath, pathToFileURL } from 'node:url';\nimport type { CanonicalizeContext, CompileResult, Exception, Syntax } from 'sass';\nimport { MemoryCache } from '../cache';\nimport type { SassWorkerImplementation } from '../sass/sass-service';\nimport { StylesheetLanguage, StylesheetPluginOptions } from './stylesheet-plugin-factory';\n\nlet sassWorkerPool: SassWorkerImplementation | undefined;\nlet sassWorkerPoolPromise: Promise<SassWorkerImplementation> | undefined;\n\nfunction isSassException(error: unknown): error is Exception {\n  return !!error && typeof error === 'object' && 'sassMessage' in error;\n}\n\nexport function shutdownSassWorkerPool(): void {\n  if (sassWorkerPool) {\n    void sassWorkerPool.close();\n    sassWorkerPool = undefined;\n    // eslint-disable-next-line @typescript-eslint/no-misused-promises\n  } else if (sassWorkerPoolPromise) {\n    void sassWorkerPoolPromise.then(shutdownSassWorkerPool);\n  }\n  sassWorkerPoolPromise = undefined;\n}\n\nexport const SassStylesheetLanguage = Object.freeze<StylesheetLanguage>({\n  name: 'sass',\n  componentFilter: /^s[ac]ss;/,\n  fileFilter: /\\.s[ac]ss$/,\n  process(data, file, format, options, build) {\n    const syntax = format === 'sass' ? 'indented' : 'scss';\n    const resolveUrl = async (url: string, options: CanonicalizeContext) => {\n      let resolveDir = build.initialOptions.absWorkingDir;\n      if (options.containingUrl) {\n        resolveDir = dirname(fileURLToPath(options.containingUrl));\n      }\n\n      const result = await build.resolve(url, {\n        kind: 'import-rule',\n        resolveDir,\n      });\n\n      return result;\n    };\n\n    return compileString(data, file, syntax, options, resolveUrl);\n  },\n});\n\nfunction parsePackageName(url: string): { packageName: string; readonly pathSegments: string[] } {\n  const parts = url.split('/');\n  const hasScope = parts.length >= 2 && parts[0].startsWith('@');\n  const [nameOrScope, nameOrFirstPath, ...pathPart] = parts;\n  const packageName = hasScope ? `${nameOrScope}/${nameOrFirstPath}` : nameOrScope;\n\n  return {\n    packageName,\n    get pathSegments() {\n      return !hasScope && nameOrFirstPath ? [nameOrFirstPath, ...pathPart] : pathPart;\n    },\n  };\n}\n\nasync function compileString(\n  data: string,\n  filePath: string,\n  syntax: Syntax,\n  options: StylesheetPluginOptions,\n  resolveUrl: (url: string, options: CanonicalizeContext) => Promise<ResolveResult>,\n): Promise<OnLoadResult> {\n  // Lazily load Sass when a Sass file is found\n  if (sassWorkerPool === undefined) {\n    if (sassWorkerPoolPromise === undefined) {\n      sassWorkerPoolPromise = import('../sass/sass-service').then(\n        sassService => new sassService.SassWorkerImplementation(true),\n      );\n    }\n    sassWorkerPool = await sassWorkerPoolPromise;\n  }\n\n  // Cache is currently local to individual compile requests.\n  // Caching follows Sass behavior where a given url will always resolve to the same value\n  // regardless of its importer's path.\n  // A null value indicates that the cached resolution attempt failed to find a location and\n  // later stage resolution should be attempted. This avoids potentially expensive repeat\n  // failing resolution attempts.\n  const resolutionCache = new MemoryCache<URL | null>();\n  const packageRootCache = new MemoryCache<string | null>();\n  const warnings: PartialMessage[] = [];\n  const { silenceDeprecations, futureDeprecations, fatalDeprecations } = options.sass ?? {};\n\n  try {\n    const { css, sourceMap, loadedUrls } = await sassWorkerPool.compileStringAsync(data, {\n      url: pathToFileURL(filePath),\n      style: 'expanded',\n      syntax,\n      loadPaths: options.includePaths,\n      sourceMap: options.sourcemap,\n      sourceMapIncludeSources: options.sourcemap,\n      silenceDeprecations,\n      fatalDeprecations,\n      futureDeprecations,\n      quietDeps: true,\n      importers: [\n        {\n          findFileUrl: (url, options) =>\n            resolutionCache.getOrCreate(url, async () => {\n              const result = await resolveUrl(url, options);\n              if (result.path) {\n                return pathToFileURL(result.path);\n              }\n\n              // Check for package deep imports\n              const { packageName, pathSegments } = parsePackageName(url);\n\n              // Caching package root locations is particularly beneficial for `@material/*` packages\n              // which extensively use deep imports.\n              const packageRoot = await packageRootCache.getOrCreate(packageName, async () => {\n                // Use the required presence of a package root `package.json` file to resolve the location\n                const packageResult = await resolveUrl(packageName + '/package.json', options);\n\n                return packageResult.path ? dirname(packageResult.path) : null;\n              });\n\n              // Package not found could be because of an error or the specifier is intended to be found\n              // via a later stage of the resolution process (`loadPaths`, etc.).\n              // Errors are reported after the full completion of the resolution process. Exceptions for\n              // not found packages should not be raised here.\n              if (packageRoot) {\n                return pathToFileURL(join(packageRoot, ...pathSegments));\n              }\n\n              // Not found\n              return null;\n            }),\n        },\n      ],\n      logger: {\n        warn: (text, { deprecation, stack, span }) => {\n          const notes: PartialNote[] = [];\n          if (deprecation) {\n            notes.push({ text });\n          }\n          if (stack && !span) {\n            notes.push({ text: stack });\n          }\n\n          warnings.push({\n            text: deprecation ? 'Deprecation' : text,\n            location: span && {\n              file: span.url && fileURLToPath(span.url),\n              lineText: span.context,\n              // Sass line numbers are 0-based while esbuild's are 1-based\n              line: span.start.line + 1,\n              column: span.start.column,\n            },\n            notes,\n          });\n        },\n      },\n    });\n\n    return {\n      loader: 'css',\n      contents: sourceMap ? `${css}\\n${sourceMapToUrlComment(sourceMap, dirname(filePath))}` : css,\n      watchFiles: loadedUrls.map(url => fileURLToPath(url)),\n      warnings,\n    };\n  } catch (error) {\n    if (isSassException(error)) {\n      const fileWithError = error.span.url ? fileURLToPath(error.span.url) : undefined;\n\n      const watchFiles = [filePath, ...extractFilesFromStack(error.sassStack)];\n      if (fileWithError) {\n        watchFiles.push(fileWithError);\n      }\n\n      return {\n        loader: 'css',\n        errors: [\n          {\n            text: error.message,\n          },\n        ],\n        warnings,\n        watchFiles,\n      };\n    }\n\n    throw error;\n  }\n}\n\nfunction sourceMapToUrlComment(sourceMap: Exclude<CompileResult['sourceMap'], undefined>, root: string): string {\n  // Remove `file` protocol from all sourcemap sources and adjust to be relative to the input file.\n  // This allows esbuild to correctly process the paths.\n  sourceMap.sources = sourceMap.sources.map(source => relative(root, fileURLToPath(source)));\n\n  const urlSourceMap = Buffer.from(JSON.stringify(sourceMap), 'utf-8').toString('base64');\n\n  return `/*# sourceMappingURL=data:application/json;charset=utf-8;base64,${urlSourceMap} */`;\n}\n\nfunction* extractFilesFromStack(stack: string): Iterable<string> {\n  const lines = stack.split('\\n');\n  const cwd = process.cwd();\n\n  // Stack line has format of \"<file> <location> <identifier>\"\n  for (const line of lines) {\n    const segments = line.split(' ');\n    if (segments.length < 3) {\n      break;\n    }\n\n    // Extract path from stack line.\n    // Paths may contain spaces. All segments before location are part of the file path.\n    let path = '';\n    let index = 0;\n    while (!segments[index].match(/\\d+:\\d+/)) {\n      path += segments[index++];\n    }\n\n    if (path) {\n      // Stack paths from dart-sass are relative to the current working directory (not input file or workspace root)\n      yield join(cwd, path);\n    }\n  }\n}\n"]}