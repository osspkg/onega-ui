{"version":3,"file":"less-language.js","sourceRoot":"","sources":["../../../../src/lib/styles/stylesheets/less-language.ts"],"names":[],"mappings":"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","sourcesContent":["import type { Location, OnLoadResult, PluginBuild } from 'esbuild';\nimport { readFile } from 'node:fs/promises';\nimport { StylesheetLanguage, StylesheetPluginOptions } from './stylesheet-plugin-factory';\n\n/**\n * The lazy-loaded instance of the less stylesheet preprocessor.\n * It is only imported and initialized if a less stylesheet is used.\n */\nlet lessPreprocessor: typeof import('less') | undefined;\n\ninterface LessException extends Error {\n  filename: string;\n  line: number;\n  column: number;\n  extract?: string[];\n}\n\nfunction isLessException(error: unknown): error is LessException {\n  return !!error && typeof error === 'object' && 'column' in error;\n}\n\nexport const LessStylesheetLanguage = Object.freeze<StylesheetLanguage>({\n  name: 'less',\n  componentFilter: /^less;/,\n  fileFilter: /\\.less$/,\n  process(data, file, _, options, build) {\n    return compileString(\n      data,\n      file,\n      options,\n      build.resolve.bind(build),\n      /* unsafeInlineJavaScript */ false,\n    );\n  },\n});\n\nasync function compileString(\n  data: string,\n  filename: string,\n  options: StylesheetPluginOptions,\n  resolver: PluginBuild['resolve'],\n  unsafeInlineJavaScript: boolean,\n): Promise<OnLoadResult> {\n  try {\n    lessPreprocessor ??= (await import('less')).default;\n  } catch {\n    return {\n      errors: [\n        {\n          text: 'Unable to load the \"less\" stylesheet preprocessor.',\n          location: null,\n          notes: [\n            {\n              text:\n                'Ensure that the \"less\" Node.js package is installed within the project. ' +\n                \"If not present, installation via the project's package manager should resolve the error.\",\n            },\n          ],\n        },\n      ],\n    };\n  }\n  const less = lessPreprocessor;\n\n  const resolverPlugin: Less.Plugin = {\n    install({ FileManager }, pluginManager): void {\n      const resolverFileManager = new (class extends FileManager {\n        override supportsSync(): boolean {\n          return false;\n        }\n\n        override supports(): boolean {\n          return true;\n        }\n\n        override async loadFile(\n          filename: string,\n          currentDirectory: string,\n          options: Less.LoadFileOptions,\n          environment: Less.Environment,\n        ): Promise<Less.FileLoadResult> {\n          // Attempt direct loading as a relative path to avoid resolution overhead\n          try {\n            return await super.loadFile(filename, currentDirectory, options, environment);\n          } catch (error) {\n            // Attempt a full resolution if not found\n            const fullResult = await resolver(filename, {\n              kind: 'import-rule',\n              resolveDir: currentDirectory,\n            });\n            if (fullResult.path) {\n              return {\n                filename: fullResult.path,\n                contents: await readFile(fullResult.path, 'utf-8'),\n              };\n            }\n            // Otherwise error by throwing the failing direct result\n            throw error;\n          }\n        }\n      })();\n\n      pluginManager.addFileManager(resolverFileManager);\n    },\n  };\n\n  try {\n    const result = await less.render(data, {\n      filename,\n      paths: options.includePaths,\n      plugins: [resolverPlugin],\n      rewriteUrls: 'all',\n      javascriptEnabled: unsafeInlineJavaScript,\n      sourceMap: options.sourcemap\n        ? {\n            sourceMapFileInline: true,\n            outputSourceFiles: true,\n          }\n        : undefined,\n    } as Less.Options);\n\n    return {\n      contents: result.css,\n      loader: 'css',\n      watchFiles: [filename, ...result.imports],\n    };\n  } catch (error) {\n    if (isLessException(error)) {\n      const location = convertExceptionLocation(error);\n\n      // Retry with a warning for less files requiring the deprecated inline JavaScript option\n      if (error.message.includes('Inline JavaScript is not enabled.')) {\n        const withJsResult = await compileString(\n          data,\n          filename,\n          options,\n          resolver,\n          /* unsafeInlineJavaScript */ true,\n        );\n        withJsResult.warnings = [\n          {\n            text: 'Deprecated inline execution of JavaScript has been enabled (\"javascriptEnabled\")',\n            location,\n            notes: [\n              {\n                location: null,\n                text: 'JavaScript found within less stylesheets may be executed at build time. [https://lesscss.org/usage/#less-options]',\n              },\n              {\n                location: null,\n                text: 'Support for \"javascriptEnabled\" may be removed from the Angular CLI starting with Angular v19.',\n              },\n            ],\n          },\n        ];\n\n        return withJsResult;\n      }\n\n      return {\n        errors: [\n          {\n            text: error.message,\n            location,\n          },\n        ],\n        loader: 'css',\n        watchFiles: location.file ? [filename, location.file] : [filename],\n      };\n    }\n\n    throw error;\n  }\n}\n\nfunction convertExceptionLocation(exception: LessException): Partial<Location> {\n  return {\n    file: exception.filename,\n    line: exception.line,\n    column: exception.column,\n    // Middle element represents the line containing the exception\n    lineText: exception.extract && exception.extract[Math.trunc(exception.extract.length / 2)],\n  };\n}\n"]}