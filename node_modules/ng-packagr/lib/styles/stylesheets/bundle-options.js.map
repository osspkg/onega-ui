{"version":3,"file":"bundle-options.js","sourceRoot":"","sources":["../../../../src/lib/styles/stylesheets/bundle-options.ts"],"names":[],"mappings":";;;;;;AA0BA,sEA6CC;AAtED,0DAA6B;AAG7B,iDAAuD;AACvD,+DAAgE;AAChE,mDAAyD;AACzD,mDAAyD;AACzD,2EAA4F;AAE5F,IAAY,MAGX;AAHD,WAAY,MAAM;IAChB,2BAAiB,CAAA;IACjB,uBAAa,CAAA;AACf,CAAC,EAHW,MAAM,sBAAN,MAAM,QAGjB;AAaD,SAAgB,6BAA6B,CAC3C,OAAgC,EAChC,KAAuB,EACvB,mBAA4C;;IAE5C,6EAA6E;IAC7E,MAAM,YAAY,GAAG,MAAA,OAAO,CAAC,YAAY,0CAAE,GAAG,CAAC,WAAW,CAAC,EAAE,CAAC,mBAAI,CAAC,OAAO,CAAC,OAAO,CAAC,aAAa,EAAE,WAAW,CAAC,CAAC,CAAC;IAEhH,MAAM,aAAa,GAAG,IAAI,mDAAuB,CAC/C;QACE,SAAS,EAAE,KAAK;QAChB,YAAY;QACZ,mBAAmB;QACnB,qBAAqB,EAAE,OAAO,CAAC,qBAAqB;QACpD,oBAAoB,EAAE,OAAO,CAAC,oBAAoB;QAClD,IAAI,EAAE,OAAO,CAAC,IAAI;KACnB,EACD,KAAK,CACN,CAAC;IAEF,MAAM,OAAO,GAAa;QACxB,aAAa,CAAC,MAAM,CAAC,sCAAsB,CAAC;QAC5C,aAAa,CAAC,MAAM,CAAC,sCAAsB,CAAC;QAC5C,aAAa,CAAC,MAAM,CAAC,oCAAqB,CAAC;QAC3C,IAAA,6CAAuB,EAAC,OAAO,CAAC,MAAM,EAAE,KAAK,CAAC;KAC/C,CAAC;IAEF,OAAO;QACL,aAAa,EAAE,OAAO,CAAC,aAAa;QACpC,MAAM,EAAE,IAAI;QACZ,QAAQ,EAAE,QAAQ;QAClB,MAAM,EAAE,IAAI;QACZ,QAAQ,EAAE,IAAI;QACd,SAAS,EAAE,KAAK;QAChB,MAAM,EAAE,OAAO,CAAC,aAAa;QAC7B,KAAK,EAAE,KAAK;QACZ,QAAQ,EAAE,SAAS;QACnB,MAAM,EAAE,OAAO,CAAC,MAAM;QACtB,UAAU,EAAE,CAAC,OAAO,EAAE,MAAM,EAAE,MAAM,EAAE,YAAY,CAAC;QACnD,UAAU,EAAE,CAAC,OAAO,EAAE,MAAM,CAAC;QAC7B,6EAA6E;QAC7E,gFAAgF;QAChF,iBAAiB,EAAE,EAAE;QACrB,OAAO;KACR,CAAC;AACJ,CAAC","sourcesContent":["import type { BuildOptions, Plugin } from 'esbuild';\nimport path from 'node:path';\nimport { LoadResultCache } from '../load-result-cache';\nimport { PostcssConfiguration } from '../postcss-configuration';\nimport { CssStylesheetLanguage } from './css-language';\nimport { createCssResourcePlugin } from './css-resource-plugin';\nimport { LessStylesheetLanguage } from './less-language';\nimport { SassStylesheetLanguage } from './sass-language';\nimport { StylesheetPluginFactory, StylesheetPluginsass } from './stylesheet-plugin-factory';\n\nexport enum CssUrl {\n  inline = 'inline',\n  none = 'none',\n}\n\nexport interface BundleStylesheetOptions {\n  workspaceRoot: string;\n  includePaths?: string[];\n  cssUrl: CssUrl;\n  sass?: StylesheetPluginsass;\n  target: string[];\n  tailwindConfiguration?: { file: string; package: string };\n  postcssConfiguration?: PostcssConfiguration;\n  cacheDirectory?: string | false;\n}\n\nexport function createStylesheetBundleOptions(\n  options: BundleStylesheetOptions,\n  cache?: LoadResultCache,\n  inlineComponentData?: Record<string, string>,\n): BuildOptions & { plugins: NonNullable<BuildOptions['plugins']> } {\n  // Ensure preprocessor include paths are absolute based on the workspace root\n  const includePaths = options.includePaths?.map(includePath => path.resolve(options.workspaceRoot, includePath));\n\n  const pluginFactory = new StylesheetPluginFactory(\n    {\n      sourcemap: false,\n      includePaths,\n      inlineComponentData,\n      tailwindConfiguration: options.tailwindConfiguration,\n      postcssConfiguration: options.postcssConfiguration,\n      sass: options.sass,\n    },\n    cache,\n  );\n\n  const plugins: Plugin[] = [\n    pluginFactory.create(SassStylesheetLanguage),\n    pluginFactory.create(LessStylesheetLanguage),\n    pluginFactory.create(CssStylesheetLanguage),\n    createCssResourcePlugin(options.cssUrl, cache),\n  ];\n\n  return {\n    absWorkingDir: options.workspaceRoot,\n    bundle: true,\n    logLevel: 'silent',\n    minify: true,\n    metafile: true,\n    sourcemap: false,\n    outdir: options.workspaceRoot,\n    write: false,\n    platform: 'browser',\n    target: options.target,\n    conditions: ['style', 'sass', 'less', 'production'],\n    mainFields: ['style', 'sass'],\n    // Unlike JS, CSS does not have implicit file extensions in the general case.\n    // Preprocessor specific behavior is handled in each stylesheet language plugin.\n    resolveExtensions: [],\n    plugins,\n  };\n}\n"]}