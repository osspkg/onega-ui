{"version":3,"file":"cache.js","sourceRoot":"","sources":["../../../src/lib/utils/cache.ts"],"names":[],"mappings":"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","sourcesContent":["import { createHash } from 'node:crypto';\nimport { mkdir, readFile, writeFile } from 'node:fs/promises';\nimport { join } from 'node:path';\nimport { version as tsVersion } from 'typescript';\nimport { ngCompilerCli } from './load-esm';\n\nlet ngPackagrVersion: string | undefined;\ntry {\n  ngPackagrVersion = require('../../package.json').version;\n} catch {\n  // dev path\n  ngPackagrVersion = require('../../../package.json').version;\n}\n\nconst BIGINT_STRING_VALUE_REGEXP = /^%BigInt\\((\\d+)\\)$/;\n\nlet compilerCliVersion: string | undefined;\n\nexport async function generateKey(...valuesToConsider: string[]): Promise<string> {\n  if (compilerCliVersion === undefined) {\n    compilerCliVersion = (await ngCompilerCli()).VERSION.full;\n  }\n\n  return createHash('sha256')\n    .update(ngPackagrVersion)\n    .update(compilerCliVersion)\n    .update(tsVersion)\n    .update(valuesToConsider.join(':'))\n    .digest('hex');\n}\n\nasync function ensureCacheDirExists(cachePath: string): Promise<void> {\n  try {\n    await mkdir(cachePath, { recursive: true });\n  } catch (err) {\n    if (err.code !== 'EEXIST') {\n      throw err;\n    }\n  }\n}\n\nexport async function readCacheEntry(cachePath: string, key: string): Promise<any> {\n  const filePath = join(cachePath, key);\n\n  try {\n    const data = await readFile(filePath, 'utf8');\n\n    return JSON.parse(data, (_key, value) => {\n      if (typeof value === 'string' && value[0] === '%') {\n        const numPart = value.match(BIGINT_STRING_VALUE_REGEXP);\n        if (numPart && isFinite(numPart[1] as any)) {\n          return BigInt(numPart[1]);\n        }\n      }\n\n      return value;\n    });\n  } catch (err) {\n    if (err.code === 'ENOENT') {\n      // File does not exist (cache miss)\n      return undefined;\n    }\n\n    throw err;\n  }\n}\n\nexport async function saveCacheEntry(cachePath: string, key: string, content: any): Promise<void> {\n  const filePath = join(cachePath, key);\n\n  // Ensure the cache directory exists\n  await ensureCacheDirExists(cachePath);\n\n  const data = JSON.stringify(content, (_key, value) => (typeof value === 'bigint' ? `%BigInt(${value})` : value));\n\n  await writeFile(filePath, data, 'utf8');\n}\n"]}