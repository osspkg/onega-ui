{"version":3,"file":"compile-ngc.transform.js","sourceRoot":"","sources":["../../../../src/lib/ng-package/entry-point/compile-ngc.transform.ts"],"names":[],"mappings":"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","sourcesContent":["import ora from 'ora';\nimport * as path from 'path';\nimport ts from 'typescript';\nimport { isInProgress } from '../../graph/select';\nimport { Transform, transformFromPromise } from '../../graph/transform';\nimport { compileSourceFiles } from '../../ngc/compile-source-files';\nimport { StylesheetProcessor as StylesheetProcessorClass } from '../../styles/stylesheet-processor';\nimport { setDependenciesTsConfigPaths } from '../../ts/tsconfig';\nimport { EntryPointNode, PackageNode, isEntryPoint, isPackage } from '../nodes';\nimport { NgPackagrOptions } from '../options.di';\n\nexport const compileNgcTransformFactory = (\n  StylesheetProcessor: typeof StylesheetProcessorClass,\n  options: NgPackagrOptions,\n): Transform => {\n  return transformFromPromise(async graph => {\n    const spinner = ora({\n      hideCursor: false,\n      discardStdin: false,\n    });\n\n    const entryPoints: EntryPointNode[] = [];\n    let entryPoint: EntryPointNode;\n    let ngPackageNode: PackageNode;\n\n    for (const node of graph.values()) {\n      if (isEntryPoint(node)) {\n        entryPoints.push(node);\n\n        if (isInProgress(node)) {\n          entryPoint = node;\n        }\n      } else if (isPackage(node)) {\n        ngPackageNode = node;\n      }\n    }\n\n    const projectBasePath = ngPackageNode.data.primary.basePath;\n\n    try {\n      // Add paths mappings for dependencies\n      const tsConfig = setDependenciesTsConfigPaths(entryPoint.data.tsConfig, entryPoints);\n\n      // Compile TypeScript sources\n      const { esm2022: esm2022, declarations } = entryPoint.data.destinationFiles;\n      const { basePath, cssUrl, styleIncludePaths, sass } = entryPoint.data.entryPoint;\n      const { moduleResolutionCache } = entryPoint.cache;\n\n      spinner.start(\n        `Compiling with Angular sources in Ivy ${tsConfig.options.compilationMode || 'full'} compilation mode.`,\n      );\n\n      entryPoint.cache.stylesheetProcessor ??= new StylesheetProcessor(\n        projectBasePath,\n        basePath,\n        cssUrl,\n        styleIncludePaths,\n        sass,\n        options.cacheEnabled && options.cacheDirectory,\n        options.watch,\n      );\n\n      await compileSourceFiles(\n        graph,\n        tsConfig,\n        moduleResolutionCache,\n        options,\n        {\n          outDir: path.dirname(esm2022),\n          declarationDir: path.dirname(declarations),\n          declaration: true,\n          target: ts.ScriptTarget.ES2022,\n        },\n        entryPoint.cache.stylesheetProcessor,\n      );\n    } catch (error) {\n      spinner.fail();\n      throw error;\n    } finally {\n      if (!options.watch) {\n        entryPoint.cache.stylesheetProcessor?.destroy();\n      }\n    }\n\n    spinner.succeed();\n\n    return graph;\n  });\n};\n"]}