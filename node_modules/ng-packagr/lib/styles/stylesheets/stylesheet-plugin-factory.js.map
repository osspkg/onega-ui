{"version":3,"file":"stylesheet-plugin-factory.js","sourceRoot":"","sources":["../../../../src/lib/styles/stylesheets/stylesheet-plugin-factory.ts"],"names":[],"mappings":"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","sourcesContent":["import type { OnLoadResult, Plugin, PluginBuild } from 'esbuild';\nimport glob from 'fast-glob';\nimport assert from 'node:assert';\nimport { readFile } from 'node:fs/promises';\nimport { extname } from 'node:path';\nimport type { Options } from 'sass';\nimport { LoadResultCache, createCachedLoad } from '../load-result-cache';\nimport {PostcssConfiguration} from '../postcss-configuration';\n\n/**\n * Configuration options for handling Sass-specific deprecations in a stylesheet plugin.\n */\nexport type StylesheetPluginsass = Pick<\n  Options<'async'>,\n  'futureDeprecations' | 'fatalDeprecations' | 'silenceDeprecations'\n>;\n\n/**\n * Convenience type for a postcss processor.\n */\ntype PostcssProcessor = import('postcss').Processor;\n\n/**\n * The lazy-loaded instance of the postcss stylesheet postprocessor.\n * It is only imported and initialized if postcss is needed.\n */\nlet postcss: (typeof import('postcss'))['default'] | undefined;\n\n/**\n * An object containing the plugin options to use when processing stylesheets.\n */\nexport interface StylesheetPluginOptions {\n  /**\n   * Controls the use and creation of sourcemaps when processing the stylesheets.\n   * If true, sourcemap processing is enabled; if false, disabled.\n   */\n  sourcemap: boolean;\n\n  /**\n   * An optional array of paths that will be searched for stylesheets if the default\n   * resolution process for the stylesheet language does not succeed.\n   */\n  includePaths?: string[];\n\n  /**\n   * Optional component data for any inline styles from Component decorator `styles` fields.\n   * The key is an internal angular resource URI and the value is the stylesheet content.\n   */\n  inlineComponentData?: Record<string, string>;\n\n  /**\n   * Optional information used to load and configure Tailwind CSS. If present, the postcss\n   * will be added to the stylesheet processing with the Tailwind plugin setup as provided\n   * by the configuration file.\n   */\n  tailwindConfiguration?: { file: string; package: string };\n\n  /**\n   * Optional configuration object for custom postcss usage. If present, postcss will be\n   * initialized and used for every stylesheet. This overrides the tailwind integration\n   * and any tailwind usage must be manually configured in the custom postcss usage.\n   */\n  postcssConfiguration?: PostcssConfiguration;\n\n  /**\n   * Optional Options for configuring Sass behavior.\n   */\n  sass?: StylesheetPluginsass;\n}\n\n/**\n * An array of keywords that indicate Tailwind CSS processing is required for a stylesheet.\n *\n * Based on https://tailwindcss.com/docs/functions-and-directives\n */\nconst TAILWIND_KEYWORDS = [\n  '@tailwind',\n  '@layer',\n  '@apply',\n  '@config',\n  'theme(',\n  'screen(',\n  '@screen', // Undocumented in version 3, see: https://github.com/tailwindlabs/tailwindcss/discussions/7516.\n];\n\nexport interface StylesheetLanguage {\n  name: string;\n  componentFilter: RegExp;\n  fileFilter: RegExp;\n  process?(\n    data: string,\n    file: string,\n    format: string,\n    options: StylesheetPluginOptions,\n    build: PluginBuild,\n  ): OnLoadResult | Promise<OnLoadResult>;\n}\n\n/**\n * Cached postcss instances that can be re-used between various StylesheetPluginFactory instances.\n */\nconst postcssProcessors = new Map<string, WeakRef<PostcssProcessor>>();\n\nexport class StylesheetPluginFactory {\n  constructor(\n    private readonly options: StylesheetPluginOptions,\n    private readonly cache?: LoadResultCache,\n  ) {}\n\n  create(language: Readonly<StylesheetLanguage>): Plugin {\n    const { cache, options, setupPostcss } = this;\n\n    // Return a noop plugin if no load actions are required\n    if (!language.process && !options.postcssConfiguration && !options.tailwindConfiguration) {\n      return {\n        name: 'angular-' + language.name,\n        setup() {},\n      };\n    }\n\n    return {\n      name: 'angular-' + language.name,\n      async setup(build) {\n        // Setup postcss if needed\n        let postcssProcessor: PostcssProcessor | undefined;\n        build.onStart(async () => {\n          try {\n            postcssProcessor = await setupPostcss;\n          } catch {\n            return {\n              errors: [\n                {\n                  text: 'Unable to load the \"postcss\" stylesheet processor.',\n                  location: null,\n                  notes: [\n                    {\n                      text:\n                        'Ensure that the \"postcss\" Node.js package is installed within the project. ' +\n                        \"If not present, installation via the project's package manager should resolve the error.\",\n                    },\n                  ],\n                },\n              ],\n            };\n          }\n        });\n\n        // Add a load callback to support inline Component styles\n        build.onLoad(\n          { filter: language.componentFilter, namespace: 'angular:styles/component' },\n          createCachedLoad(cache, (args) => {\n            const data = options.inlineComponentData?.[args.path];\n            assert(\n              typeof data === 'string',\n              `component style name should always be found [${args.path}]`,\n            );\n\n            const [format, , filename] = args.path.split(';', 3);\n\n            return processStylesheet(\n              language,\n              data,\n              filename,\n              format,\n              options,\n              build,\n              postcssProcessor,\n            );\n          }),\n        );\n\n        // Add a load callback to support files from disk\n        build.onLoad(\n          { filter: language.fileFilter, namespace: 'file' },\n          createCachedLoad(cache, async (args) => {\n            const data = await readFile(args.path, 'utf-8');\n\n            return processStylesheet(\n              language,\n              data,\n              args.path,\n              extname(args.path).toLowerCase().slice(1),\n              options,\n              build,\n              postcssProcessor,\n            );\n          }),\n        );\n      },\n    };\n  }\n\n  private setupPostcssPromise: Promise<PostcssProcessor | undefined> | undefined;\n  private get setupPostcss(): Promise<PostcssProcessor | undefined> {\n    return (this.setupPostcssPromise ??= this.initPostcss());\n  }\n\n  private initPostcssCallCount = 0;\n\n  /**\n   * This method should not be called directly.\n   * Use {@link setupPostcss} instead.\n   */\n  private async initPostcss(): Promise<PostcssProcessor | undefined> {\n    assert.equal(++this.initPostcssCallCount, 1, '`initPostcss` was called more than once.');\n\n    const { options } = this;\n    if (options.postcssConfiguration) {\n      const postCssInstanceKey = JSON.stringify(options.postcssConfiguration);\n      let postcssProcessor = postcssProcessors.get(postCssInstanceKey)?.deref();\n\n      if (!postcssProcessor) {\n        postcss ??= (await import('postcss')).default;\n        postcssProcessor = postcss();\n        for (const [pluginName, pluginOptions] of options.postcssConfiguration.plugins) {\n          const { default: plugin } = await import(pluginName);\n          if (typeof plugin !== 'function' || plugin.postcss !== true) {\n            throw new Error(`Attempted to load invalid Postcss plugin: \"${pluginName}\"`);\n          }\n\n          postcssProcessor.use(plugin(pluginOptions));\n        }\n\n        postcssProcessors.set(postCssInstanceKey, new WeakRef(postcssProcessor));\n      }\n\n      return postcssProcessor;\n    } else if (options.tailwindConfiguration) {\n      const { package: tailwindPackage, file: config } = options.tailwindConfiguration;\n      const postCssInstanceKey = tailwindPackage + ':' + config;\n      let postcssProcessor = postcssProcessors.get(postCssInstanceKey)?.deref();\n\n      if (!postcssProcessor) {\n        postcss ??= (await import('postcss')).default;\n        const tailwind = await import(tailwindPackage);\n        postcssProcessor = postcss().use(tailwind.default({ config }));\n        postcssProcessors.set(postCssInstanceKey, new WeakRef(postcssProcessor));\n      }\n\n      return postcssProcessor;\n    }\n  }\n}\n\nasync function processStylesheet(\n  language: Readonly<StylesheetLanguage>,\n  data: string,\n  filename: string,\n  format: string,\n  options: StylesheetPluginOptions,\n  build: PluginBuild,\n  postcssProcessor: PostcssProcessor | undefined,\n) {\n  let result: OnLoadResult;\n\n  // Process the input data if the language requires preprocessing\n  if (language.process) {\n    result = await language.process(data, filename, format, options, build);\n  } else {\n    result = {\n      contents: data,\n      loader: 'css',\n      watchFiles: [filename],\n    };\n  }\n\n  // Return early if there are no contents to further process or there are errors\n  if (!result.contents || result.errors?.length) {\n    return result;\n  }\n\n  // Only use postcss if Tailwind processing is required or custom postcss is present.\n  if (postcssProcessor && (options.postcssConfiguration || hasTailwindKeywords(result.contents))) {\n    const postcssResult = await compileString(\n      typeof result.contents === 'string'\n        ? result.contents\n        : Buffer.from(result.contents).toString('utf-8'),\n      filename,\n      postcssProcessor,\n      options,\n    );\n\n    // Merge results\n    if (postcssResult.errors?.length) {\n      delete result.contents;\n    }\n    if (result.warnings && postcssResult.warnings) {\n      postcssResult.warnings.unshift(...result.warnings);\n    }\n    if (result.watchFiles && postcssResult.watchFiles) {\n      postcssResult.watchFiles.unshift(...result.watchFiles);\n    }\n    if (result.watchDirs && postcssResult.watchDirs) {\n      postcssResult.watchDirs.unshift(...result.watchDirs);\n    }\n    result = {\n      ...result,\n      ...postcssResult,\n    };\n  }\n\n  return result;\n}\n\n/**\n * Searches the provided contents for keywords that indicate Tailwind is used\n * within a stylesheet.\n * @param contents A string or Uint8Array containing UTF-8 text.\n * @returns True, if the contents contains tailwind keywords; False, otherwise.\n */\nfunction hasTailwindKeywords(contents: string | Uint8Array): boolean {\n  // TODO: use better search algorithm for keywords\n  if (typeof contents === 'string') {\n    return TAILWIND_KEYWORDS.some((keyword) => contents.includes(keyword));\n  }\n\n  // Contents is a Uint8Array\n  const data = contents instanceof Buffer ? contents : Buffer.from(contents);\n\n  return TAILWIND_KEYWORDS.some((keyword) => data.includes(keyword));\n}\n\n/**\n * Compiles the provided CSS stylesheet data using a provided postcss processor and provides an\n * esbuild load result that can be used directly by an esbuild Plugin.\n * @param data The stylesheet content to process.\n * @param filename The name of the file that contains the data.\n * @param postcssProcessor A postcss processor instance to use.\n * @param options The plugin options to control the processing.\n * @returns An esbuild OnLoaderResult object with the processed content, warnings, and/or errors.\n */\nasync function compileString(\n  data: string,\n  filename: string,\n  postcssProcessor: import('postcss').Processor,\n  options: StylesheetPluginOptions,\n): Promise<OnLoadResult> {\n  try {\n    const postcssResult = await postcssProcessor.process(data, {\n      from: filename,\n      to: filename,\n      map: options.sourcemap && {\n        inline: true,\n        sourcesContent: true,\n      },\n    });\n\n    const loadResult: OnLoadResult = {\n      contents: postcssResult.css,\n      loader: 'css',\n    };\n\n    const rawWarnings = postcssResult.warnings();\n    if (rawWarnings.length > 0) {\n      const lineMappings = new Map<string, string[] | null>();\n      loadResult.warnings = rawWarnings.map((warning) => {\n        const file = warning.node.source?.input.file;\n        if (file === undefined) {\n          return { text: warning.text };\n        }\n\n        let lines = lineMappings.get(file);\n        if (lines === undefined) {\n          lines = warning.node.source?.input.css.split(/\\r?\\n/);\n          lineMappings.set(file, lines ?? null);\n        }\n\n        return {\n          text: warning.text,\n          location: {\n            file,\n            line: warning.line,\n            column: warning.column - 1,\n            lineText: lines?.[warning.line - 1],\n          },\n        };\n      });\n    }\n\n    for (const resultMessage of postcssResult.messages) {\n      if (resultMessage.type === 'dependency' && typeof resultMessage['file'] === 'string') {\n        loadResult.watchFiles ??= [];\n        loadResult.watchFiles.push(resultMessage['file']);\n      } else if (\n        resultMessage.type === 'dir-dependency' &&\n        typeof resultMessage['dir'] === 'string' &&\n        typeof resultMessage['glob'] === 'string'\n      ) {\n        loadResult.watchFiles ??= [];\n        const dependencies = await glob(resultMessage['glob'], {\n          absolute: true,\n          cwd: resultMessage['dir'],\n        });\n        loadResult.watchFiles.push(...dependencies);\n      }\n    }\n\n    return loadResult;\n  } catch (error) {\n    postcss ??= (await import('postcss')).default;\n    if (error instanceof postcss.CssSyntaxError) {\n      const lines = error.source?.split(/\\r?\\n/);\n\n      return {\n        errors: [\n          {\n            text: error.reason,\n            location: {\n              file: error.file,\n              line: error.line,\n              column: error.column && error.column - 1,\n              lineText: error.line === undefined ? undefined : lines?.[error.line - 1],\n            },\n          },\n        ],\n      };\n    }\n\n    throw error;\n  }\n}\n"]}