{"version":3,"file":"lexer.js","sourceRoot":"","sources":["../../../../src/lib/styles/sass/lexer.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Determines if a unicode code point is a CSS whitespace character.\n * @param code The unicode code point to test.\n * @returns true, if the code point is CSS whitespace; false, otherwise.\n */\nfunction isWhitespace(code: number): boolean {\n  // Based on https://www.w3.org/TR/css-syntax-3/#whitespace\n  switch (code) {\n    case 0x0009: // tab\n    case 0x0020: // space\n    case 0x000a: // line feed\n    case 0x000c: // form feed\n    case 0x000d: // carriage return\n      return true;\n    default:\n      return false;\n  }\n}\n\n/**\n * Scans a CSS or Sass file and locates all valid url function values as defined by the\n * syntax specification.\n * @param contents A string containing a CSS or Sass file to scan.\n * @returns An iterable that yields each CSS url function value found.\n */\nexport function* findUrls(\n  contents: string,\n): Iterable<{ start: number; end: number; value: string }> {\n  let pos = 0;\n  let width = 1;\n  let current = -1;\n  const next = () => {\n    pos += width;\n    current = contents.codePointAt(pos) ?? -1;\n    width = current > 0xffff ? 2 : 1;\n\n    return current;\n  };\n\n  // Based on https://www.w3.org/TR/css-syntax-3/#consume-ident-like-token\n  while ((pos = contents.indexOf('url(', pos)) !== -1) {\n    width = 1;\n\n    // Ensure whitespace, comma, or colon before `url(`\n    if (pos > 0) {\n      pos -= 2;\n      next();\n      if (!isWhitespace(current) && current !== 0x002c && current !== 0x003a) {\n        // Skip - not a url token\n        pos += 3;\n        continue;\n      }\n      pos += 1;\n    }\n\n    // Set to position of the (\n    pos += 3;\n\n    // Consume all leading whitespace\n    while (isWhitespace(next())) {\n      /* empty */\n    }\n\n    // Initialize URL state\n    const url = { start: pos, end: -1, value: '' };\n    let complete = false;\n\n    // If \" or ', then consume the value as a string\n    if (current === 0x0022 || current === 0x0027) {\n      const ending = current;\n      // Based on https://www.w3.org/TR/css-syntax-3/#consume-string-token\n      while (!complete) {\n        switch (next()) {\n          case -1: // EOF\n            return;\n          case 0x000a: // line feed\n          case 0x000c: // form feed\n          case 0x000d: // carriage return\n            // Invalid\n            complete = true;\n            break;\n          case 0x005c: // \\ -- character escape\n            // If not EOF or newline, add the character after the escape\n            switch (next()) {\n              case -1:\n                return;\n              case 0x000a: // line feed\n              case 0x000c: // form feed\n              case 0x000d: // carriage return\n                // Skip when inside a string\n                break;\n              default:\n                // TODO: Handle hex escape codes\n                url.value += String.fromCodePoint(current);\n                break;\n            }\n            break;\n          case ending:\n            // Full string position should include the quotes for replacement\n            url.end = pos + 1;\n            complete = true;\n            yield url;\n            break;\n          default:\n            url.value += String.fromCodePoint(current);\n            break;\n        }\n      }\n\n      next();\n      continue;\n    }\n\n    // Based on https://www.w3.org/TR/css-syntax-3/#consume-url-token\n    while (!complete) {\n      switch (current) {\n        case -1: // EOF\n          return;\n        case 0x0022: // \"\n        case 0x0027: // '\n        case 0x0028: // (\n          // Invalid\n          complete = true;\n          break;\n        case 0x0029: // )\n          // URL is valid and complete\n          url.end = pos;\n          complete = true;\n          break;\n        case 0x005c: // \\ -- character escape\n          // If not EOF or newline, add the character after the escape\n          switch (next()) {\n            case -1: // EOF\n              return;\n            case 0x000a: // line feed\n            case 0x000c: // form feed\n            case 0x000d: // carriage return\n              // Invalid\n              complete = true;\n              break;\n            default:\n              // TODO: Handle hex escape codes\n              url.value += String.fromCodePoint(current);\n              break;\n          }\n          break;\n        default:\n          if (isWhitespace(current)) {\n            while (isWhitespace(next())) {\n              /* empty */\n            }\n            // Unescaped whitespace is only valid before the closing )\n            if (current === 0x0029) {\n              // URL is valid\n              url.end = pos;\n            }\n            complete = true;\n          } else {\n            // Add the character to the url value\n            url.value += String.fromCodePoint(current);\n          }\n          break;\n      }\n      next();\n    }\n\n    // An end position indicates a URL was found\n    if (url.end !== -1) {\n      yield url;\n    }\n  }\n}\n"]}