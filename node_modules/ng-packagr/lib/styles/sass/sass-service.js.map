{"version":3,"file":"sass-service.js","sourceRoot":"","sources":["../../../../src/lib/styles/sass/sass-service.ts"],"names":[],"mappings":"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","sourcesContent":["import assert from 'node:assert';\nimport { fileURLToPath, pathToFileURL } from 'node:url';\nimport { MessageChannel } from 'node:worker_threads';\nimport type {\n  CanonicalizeContext,\n  CompileResult,\n  Deprecation,\n  Exception,\n  FileImporter,\n  Importer,\n  NodePackageImporter,\n  SourceSpan,\n  StringOptions,\n} from 'sass';\n\nimport { WorkerPool } from '../worker-pool';\n\nconst maxWorkersVariable = process.env['NG_BUILD_MAX_WORKERS'];\nconst maxWorkers = typeof maxWorkersVariable === 'string' && maxWorkersVariable !== '' ? +maxWorkersVariable : 4;\n\n// Polyfill Symbol.dispose if not present\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(Symbol as any).dispose ??= Symbol('Symbol Dispose');\n\n/**\n * The maximum number of Workers that will be created to execute render requests.\n */\nconst MAX_RENDER_WORKERS = maxWorkers;\n\n/**\n * All available importer types.\n */\ntype Importers =\n  | Importer<'sync'>\n  | Importer<'async'>\n  | FileImporter<'sync'>\n  | FileImporter<'async'>\n  | NodePackageImporter;\n\nexport interface SerializableVersion {\n  major: number;\n  minor: number;\n  patch: number;\n}\n\nexport interface SerializableDeprecation extends Omit<Deprecation, 'obsoleteIn' | 'deprecatedIn'> {\n  /** The version this deprecation first became active in. */\n  deprecatedIn: SerializableVersion | null;\n\n  /** The version this deprecation became obsolete in. */\n  obsoleteIn: SerializableVersion | null;\n}\n\nexport type SerializableWarningMessage = (\n  | {\n      deprecation: true;\n      deprecationType: SerializableDeprecation;\n    }\n  | { deprecation: false }\n) & {\n  message: string;\n  span?: Omit<SourceSpan, 'url'> & { url?: string };\n  stack?: string;\n};\n\n/**\n * A response from the Sass render Worker containing the result of the operation.\n */\ninterface RenderResponseMessage {\n  error?: Exception;\n  result?: Omit<CompileResult, 'loadedUrls'> & { loadedUrls: string[] };\n  warnings?: SerializableWarningMessage[];\n}\n\n/**\n * A Sass renderer implementation that provides an interface that can be used by Webpack's\n * `sass-loader`. The implementation uses a Worker thread to perform the Sass rendering\n * with the `dart-sass` package.  The `dart-sass` synchronous render function is used within\n * the worker which can be up to two times faster than the asynchronous variant.\n */\nexport class SassWorkerImplementation {\n  #workerPool: WorkerPool | undefined;\n\n  constructor(\n    private readonly rebase = false,\n    readonly maxThreads = MAX_RENDER_WORKERS,\n  ) {}\n\n  #ensureWorkerPool(): WorkerPool {\n    this.#workerPool ??= new WorkerPool({\n      filename: require.resolve('./worker'),\n      maxThreads: this.maxThreads,\n    });\n\n    return this.#workerPool;\n  }\n\n  /**\n   * Provides information about the Sass implementation.\n   * This mimics enough of the `dart-sass` value to be used with the `sass-loader`.\n   */\n  get info(): string {\n    return 'dart-sass\\tworker';\n  }\n\n  /**\n   * The synchronous render function is not used by the `sass-loader`.\n   */\n  compileString(): never {\n    throw new Error('Sass compileString is not supported.');\n  }\n\n  /**\n   * Asynchronously request a Sass stylesheet to be renderered.\n   *\n   * @param source The contents to compile.\n   * @param options The `dart-sass` options to use when rendering the stylesheet.\n   */\n  async compileStringAsync(\n    source: string,\n    options: StringOptions<'async'>,\n  ): Promise<CompileResult> {\n    // The `functions`, `logger` and `importer` options are JavaScript functions that cannot be transferred.\n    // If any additional function options are added in the future, they must be excluded as well.\n    const { functions, importers, url, logger, ...serializableOptions } = options;\n\n    // The CLI's configuration does not use or expose the ability to define custom Sass functions\n    if (functions && Object.keys(functions).length > 0) {\n      throw new Error('Sass custom functions are not supported.');\n    }\n\n    using importerChannel = importers?.length ? this.#createImporterChannel(importers) : undefined;\n\n    const response = (await this.#ensureWorkerPool().run(\n      {\n        source,\n        importerChannel,\n        hasLogger: !!logger,\n        rebase: this.rebase,\n        options: {\n          ...serializableOptions,\n          // URL is not serializable so to convert to string here and back to URL in the worker.\n          url: url ? fileURLToPath(url) : undefined,\n        },\n      },\n      {\n        transferList: importerChannel ? [importerChannel.port] : undefined,\n      },\n    )) as RenderResponseMessage;\n\n    const { result, error, warnings } = response;\n\n    if (warnings && logger?.warn) {\n      for (const { message, span, ...options } of warnings) {\n        logger.warn(message, {\n          ...options,\n          span: span && {\n            ...span,\n            url: span.url ? pathToFileURL(span.url) : undefined,\n          },\n        });\n      }\n    }\n\n    if (error) {\n      // Convert stringified url value required for cloning back to a URL object\n      const url = error.span?.url as unknown as string | undefined;\n      if (url) {\n        error.span.url = pathToFileURL(url);\n      }\n\n      throw error;\n    }\n\n    assert(result, 'Sass render worker should always return a result or an error');\n\n    return {\n      ...result,\n      // URL is not serializable so in the worker we convert to string and here back to URL.\n      loadedUrls: result.loadedUrls.map((p) => pathToFileURL(p)),\n    };\n  }\n\n  /**\n   * Shutdown the Sass render worker.\n   * Executing this method will stop any pending render requests.\n   * @returns A void promise that resolves when closing is complete.\n   */\n  async close(): Promise<void> {\n    if (this.#workerPool) {\n      try {\n        await this.#workerPool.destroy();\n      } finally {\n        this.#workerPool = undefined;\n      }\n    }\n  }\n\n  #createImporterChannel(importers: Iterable<Importers>) {\n    const { port1: mainImporterPort, port2: workerImporterPort } = new MessageChannel();\n    const importerSignal = new Int32Array(new SharedArrayBuffer(4));\n\n    mainImporterPort.on(\n      'message',\n      ({ url, options }: { url: string; options: CanonicalizeContext }) => {\n        this.processImporters(importers, url, {\n          ...options,\n          // URL is not serializable so in the worker we convert to string and here back to URL.\n          containingUrl: options.containingUrl\n            ? pathToFileURL(options.containingUrl as unknown as string)\n            : null,\n        })\n          .then((result) => {\n            mainImporterPort.postMessage(result);\n          })\n          .catch((error) => {\n            mainImporterPort.postMessage(error);\n          })\n          .finally(() => {\n            Atomics.store(importerSignal, 0, 1);\n            Atomics.notify(importerSignal, 0);\n          });\n      },\n    );\n\n    mainImporterPort.unref();\n\n    return {\n      port: workerImporterPort,\n      signal: importerSignal,\n      [Symbol.dispose]() {\n        mainImporterPort.close();\n      },\n    };\n  }\n\n  private async processImporters(\n    importers: Iterable<Importers>,\n    url: string,\n    options: CanonicalizeContext,\n  ): Promise<string | null> {\n    for (const importer of importers) {\n      if (!this.isFileImporter(importer)) {\n        // Importer\n        throw new Error('Only File Importers are supported.');\n      }\n\n      // File importer (Can be sync or aync).\n      const result = await importer.findFileUrl(url, options);\n      if (result) {\n        return fileURLToPath(result);\n      }\n    }\n\n    return null;\n  }\n\n  private isFileImporter(value: Importers): value is FileImporter {\n    return 'findFileUrl' in value;\n  }\n}\n"]}