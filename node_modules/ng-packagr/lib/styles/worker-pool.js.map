{"version":3,"file":"worker-pool.js","sourceRoot":"","sources":["../../../src/lib/styles/worker-pool.ts"],"names":[],"mappings":";;;AAAA;;GAEG;AACH,6CAAiD;AACjD,qCAAkC;AAQlC,MAAa,UAAW,SAAQ,iBAAO;IACrC,YAAY,OAA0B;QACpC,MAAM,cAAc,GAAsB;YACxC,UAAU,EAAE,CAAC;YACb,WAAW,EAAE,IAAI;YACjB,qFAAqF;YACrF,sDAAsD;YACtD,UAAU,EAAE,CAAC,OAAO,CAAC,QAAQ,CAAC,YAAY;YAC1C,YAAY,EAAE,KAAK;YACnB,GAAG,OAAO;SACX,CAAC;QAEF,+FAA+F;QAC/F,kGAAkG;QAClG,8CAA8C;QAC9C,MAAM,qBAAqB,GAAG,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,gCAAkB,aAAlB,gCAAkB,2BAAlB,gCAAkB,GAAI,CAAC;QAC3F,IAAI,qBAAqB,EAAE,CAAC;YAC1B,IAAI,OAAO,cAAc,CAAC,GAAG,KAAK,QAAQ,EAAE,CAAC;gBAC3C,cAAc,CAAC,GAAG,CAAC,oBAAoB,CAAC,GAAG,qBAAqB,CAAC;YACnE,CAAC;iBAAM,CAAC;gBACN,qEAAqE;gBACrE,cAAc,CAAC,GAAG,GAAG;oBACnB,GAAG,OAAO,CAAC,GAAG;oBACd,oBAAoB,EAAE,qBAAqB;iBAC5C,CAAC;YACJ,CAAC;QACH,CAAC;QAED,KAAK,CAAC,cAAc,CAAC,CAAC;IACxB,CAAC;CACF;AA9BD,gCA8BC","sourcesContent":["/**\n * Augment the Node.js module builtin types to support the v22.8+ compile cache functions\n */\nimport { getCompileCacheDir } from 'node:module';\nimport { Piscina } from 'piscina';\n\ndeclare module 'node:module' {\n  function getCompileCacheDir(): string | undefined;\n}\n\nexport type WorkerPoolOptions = ConstructorParameters<typeof Piscina>[0];\n\nexport class WorkerPool extends Piscina {\n  constructor(options: WorkerPoolOptions) {\n    const piscinaOptions: WorkerPoolOptions = {\n      minThreads: 1,\n      idleTimeout: 1000,\n      // Web containers do not support transferable objects with receiveOnMessagePort which\n      // is used when the Atomics based wait loop is enable.\n      useAtomics: !process.versions.webcontainer,\n      recordTiming: false,\n      ...options,\n    };\n\n    // Enable compile code caching if enabled for the main process (only exists on Node.js v22.8+).\n    // Skip if running inside Bazel via a RUNFILES environment variable check. The cache does not work\n    // well with Bazel's hermeticity requirements.\n    const compileCacheDirectory = process.env['RUNFILES'] ? undefined : getCompileCacheDir?.();\n    if (compileCacheDirectory) {\n      if (typeof piscinaOptions.env === 'object') {\n        piscinaOptions.env['NODE_COMPILE_CACHE'] = compileCacheDirectory;\n      } else {\n        // Default behavior of `env` option is to copy current process values\n        piscinaOptions.env = {\n          ...process.env,\n          'NODE_COMPILE_CACHE': compileCacheDirectory,\n        };\n      }\n    }\n\n    super(piscinaOptions);\n  }\n}\n"]}